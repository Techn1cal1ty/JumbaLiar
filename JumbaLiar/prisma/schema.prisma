// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Post, Profile and User all commented out to get rid of the squiggles 

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }

// Added enums and models below here
enum Method {
  GET
  POST
  PUT
  PATCH
  OPTIONS
  DELETE
}

enum Action {
  RESPOND
  INSERT_DB
  MUTATE_DB
}

enum Source {
  PROXY
  MODEL_DATA
  PAYLOAD
  INJECT
  STATUS_CODE
}

enum DataLookupType {
  INDEX
  FIELD
}

enum RequestLookupType {
  HEADER
  BODY
  PATH
  USER
  DATE
  STRING
  QUERY
  USAGE
}

// Audited model that Model and Endpoint "extend"
// model Audited {
//   id         String @id @default(uuid()) 
//   createdBy  Profile // Can't add attribute ID? Changed from Profile.id to type of Profile.id
//   udpdatedBy Profile // Can't add attribute ID? Changed from Profile.id to type of Profile.id
//   createdOn  DateTime @default(now()) // Changed from Number
//   updatedOn  DateTime // Changed from Number
// }

// MASS COMMENT STARTS HERE

// model Profile {
//   username String @id // Added tag
//   password String
//   email    String
// }

model Proxy {
  baseURL String @id // Added tag
  color   String
  label   String

  // Added attributes
  ProxyConfig ProxyConfig[]
}

model Model {
  //   label           String // Added tag
  //   type            String
  //   data            String

  // Audited attributes
  id String @id @default(uuid())
  //   createdBy       Profile // Can't add attribute ID? Changed from Profile.id to type of Profile.id
  //   udpdatedBy      Profile // Can't add attribute ID? Changed from Profile.id to type of Profile.id
  //   createdOn       DateTime          @default(now()) // Changed from Number
  //   updatedOn       DateTime // Changed from Number

  // Added attributes
  ModelDataConfig ModelDataConfig[]
}

// model Endpoint {
//   path       String // Added tag
//   method     Method
//   behaiors   Behavior[]
//   hidden     Boolean
//   locked     Boolean

// Audited attributes
//   id         String     @id @default(uuid())
//   createdBy  Profile // Can't add attribute ID? Changed from Profile.id to type of Profile.id
//   udpdatedBy Profile // Can't add attribute ID? Changed from Profile.id to type of Profile.id
//   createdOn  DateTime   @default(now()) // Changed from Number
//   updatedOn  DateTime // Changed from Number
// }

model Behavior {
  // trigger  Filter[]  @relation("behaviorTrigger")
  action  Action    @id
  content Content[]
  // selector Filter[] @relation("behaviorSelector")

  // Added attributes
  //   Endpoint     Endpoint? @relation(fields: [endpointPath], references: [path])
  //   endpointPath String?

  // @@unique([action]) // this is just to get it to stop whining 
}

model Content {
  source Source       @unique // Added tag
  filter Filter[]
  config ProxyConfig? @relation(fields: [proxyConfigProxyBaseURL], references: [proxyBaseURL]) //@relation(fields: [], references: []) // Not quite sure how to make this take on multiple types

  //  Added attributes
  proxyConfigProxyBaseURL String?
  behavior                Behavior? @relation(fields: [behaviorAction], references: [action])
  behaviorAction          Action
}

model Filter {
  type  DataLookupType // Not quite sure how to make this take on multiple types
  field String?
  value String // Not quite sure how to make this take on multiple types

  // Added attributes
  content       Content? @relation(fields: [contentSource], references: [source])
  contentSource Source

  // these are causing problems 
  // behavior       Behavior?      @relation(fields: [behaviorAction], references: [action])
  // behaviorAction Action
  // Behavior       Behavior       @relation(fields: [behaviorAction], references: [action])

  //   Behavior Behavior       @relation(fields: [], references: [])
  //   // Behavior Behavior       @relation(fields: [], references: [])
  //   Content  Content?       @relation(fields: [contentSource], references: [source])
  @@unique([type, value])
}

model ProxyConfig {
  proxyID Proxy  @relation(fields: [proxyBaseURL], references: [baseURL]) // Can't add attribute ID?
  path    String

  // Added attributes 
  proxyBaseURL String    @id
  content      Content[]
}

model ModelDataConfig {
  modelId Model @relation(fields: [modelLabel], references: [id]) // @id @default(uuid()) // changed from Model.id

  // Added attributes
  modelLabel String @id
}

model StatusConfig {
  status Int @id // Changed from Number
}
